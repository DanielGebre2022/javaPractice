Consider the leftmost and right most appearances of some value in an array. We'll say that the "span" is the number of elements between the two inclusive.
A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)

public class Newkie {


    public int maxSpan(int[] nums) {
        boolean match = false;
        int bigSpan = 0;
        int first;
        if (nums.length == 0) {
            bigSpan=0;
        }
        if (nums.length == 1) {
            bigSpan=1;
        }
        for(int i=0; i<nums.length-1; i++) {
            int count = 1;
            int temp = nums[i];
            for(int x=nums.length-1; x > 0; x--) {
                if (nums[x] == temp) {
                    if (x-i > bigSpan) {
                        bigSpan=x+1-i;

                    }


                }


            }

        }

        return bigSpan;
    }
    
    Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4.
    Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's,
    every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.




public int[] fix34(int[] nums) {
    int[] myNewArr = new int[nums.length];
    int fourSwap;
    for (int i=0; i<=nums.length-1;i++) {
        if (nums[i] != 3) {
            myNewArr[i] = nums[i];
        }
        if (nums[i]==3) {
            myNewArr[i] = 3;
            fourSwap = nums[i+1];
            myNewArr[i+1] = 4;
            i++;
            for(int x = i+1; x <= nums.length-1; x++) {
                if (nums[x] == 4) {
                    nums[x] = fourSwap;
                }
            }
        }
    }
    return myNewArr;


}


(This is a slightly harder version of the fix34 problem.) Return an array that contains exactly the same numbers as the given array, 
but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. 
The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. 
In this version, 5's may appear anywhere in the original array.

fix45([5, 4, 9, 4, 9, 5]) → [9, 4, 5, 4, 5, 9]
fix45([1, 4, 1, 5]) → [1, 4, 5, 1]
fix45([1, 4, 1, 5, 5, 4, 1]) → [1, 4, 5, 1, 1, 4, 5]





public int[] fix45(int[] nums) {
    int fiveSwap = 0;
    int[] myNewArr = new int[nums.length];
    for (int i=0; i <= nums.length-1; i++) {
        if (nums[i] == 4) {
            myNewArr[i] = nums[i];
            myNewArr[i+1] = 5;
        }
    for (int x = 0; x <= nums.length-1; x++) {
        if (nums[x] != 4 && nums[x] != 5) {
            fiveSwap = nums[x];
            for(int z = 0; z <= nums.length-1; z++){
                if (myNewArr[z] == 0) {
                    myNewArr[z] = fiveSwap;
                    break;
                }
            }
        }
    }

    }
    return myNewArr;
}



Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.



public boolean canBalance(int[] nums) {
        int firstHalf = 0;
        int secondHalf = 0;
        boolean even = false;
        for (int i = 0; i <= nums.length-1; i++) {
            secondHalf = 0;
            firstHalf += nums[i];
            for (int x = i+1; x <= nums.length-1; x++) {
                secondHalf += nums[x];
            }
            if (firstHalf == secondHalf) {
                even = true;
            }
        }
        return even;
}



Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer. 
The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already in sorted order.


public boolean linearIn(int[] outer, int[] inner) {
    boolean match = false;
    int count = 0;
    int checkVal = inner[count];
    for (int x = 0; x <= outer.length-1; x++) {
        if (checkVal == outer[x] && count != inner.length-1) {
            count++;
            checkVal = inner[count];
        }
        if (checkVal == outer[x] && count == inner.length-1) {
            match = true;
        }


    }
    return match;

}

Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1,    0, 2, 1,    3, 2, 1} 
(spaces added to show the 3 groups).




public int[] squareUp(int n) {
    int count = 1;
    int numElement = n*n;
    int[] myNewArr = new int[numElement];
    for (int i = n; i > 0; i--) {
        count=1;
        for (int x = i; x > 0; x--) {
            myNewArr[numElement - 1] = count;
            count++;
            numElement--;
        }
        if (n != i) {
            int drawDown = (n-i);
            numElement -= drawDown;
        }

    }
    return myNewArr;
}

